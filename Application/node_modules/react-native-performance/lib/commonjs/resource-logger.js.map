{"version":3,"names":["installResourceLogger","context","performance","addEntry","XMLHttpRequest","performanceOriginal","constructor","performanceStartTime","onreadystatechange","readyState","DONE","responseURL","responseHeaders","responseEnd","now","contentLength","Object","entries","find","header","toLowerCase","PerformanceResourceTiming","name","startTime","duration","initiatorType","transferSize","parseInt","open","uninstallResourceLogger"],"sources":["resource-logger.ts"],"sourcesContent":["import { PerformanceResourceTiming } from './performance-entry';\nimport type { PerformanceEntry } from './performance-entry';\nimport type { Performance } from './performance';\n\ninterface XMLHttpRequestType extends XMLHttpRequest {\n  new (...args: any): XMLHttpRequestType;\n  performanceOriginal: XMLHttpRequest;\n  performanceStartTime?: number;\n  responseURL: string;\n  responseHeaders: string[];\n}\ninterface Context {\n  XMLHttpRequest: XMLHttpRequestType;\n}\n\nexport const installResourceLogger = (\n  context: Context,\n  performance: Performance,\n  addEntry: (entry: PerformanceEntry) => PerformanceEntry\n) => {\n  if (context.XMLHttpRequest && !context.XMLHttpRequest.performanceOriginal) {\n    class XMLHttpRequest extends context.XMLHttpRequest {\n      constructor(...args: any) {\n        super(...args);\n        this.performanceStartTime = null;\n\n        super.onreadystatechange = () => {\n          if (this.readyState === this.DONE) {\n            if (this.responseURL && this.responseHeaders) {\n              const responseEnd = performance.now();\n              const contentLength = Object.entries(this.responseHeaders).find(\n                ([header]) => header.toLowerCase() === 'content-length'\n              );\n              addEntry(\n                new PerformanceResourceTiming({\n                  name: this.responseURL,\n                  startTime: this.performanceStartTime,\n                  duration: responseEnd - this.performanceStartTime,\n                  initiatorType: 'xmlhttprequest',\n                  responseEnd,\n                  transferSize: contentLength ? parseInt(contentLength[1]) : 0,\n                })\n              );\n            }\n          }\n        };\n      }\n\n      open(...args: any) {\n        this.performanceStartTime = performance.now();\n        //@ts-ignore\n        super.open(...args);\n      }\n    }\n    XMLHttpRequest.performanceOriginal = context.XMLHttpRequest;\n    context.XMLHttpRequest = XMLHttpRequest;\n  }\n};\n\nexport const uninstallResourceLogger = (context: any) => {\n  if (context.XMLHttpRequest && context.XMLHttpRequest.performanceOriginal) {\n    context.XMLHttpRequest = context.XMLHttpRequest.performanceOriginal;\n  }\n};\n"],"mappings":";;;;;;;AAAA;;AAeO,MAAMA,qBAAqB,GAAG,CACnCC,OADmC,EAEnCC,WAFmC,EAGnCC,QAHmC,KAIhC;EACH,IAAIF,OAAO,CAACG,cAAR,IAA0B,CAACH,OAAO,CAACG,cAAR,CAAuBC,mBAAtD,EAA2E;IACzE,MAAMD,cAAN,SAA6BH,OAAO,CAACG,cAArC,CAAoD;MAClDE,WAAW,GAAe;QACxB,MAAM,YAAN;QACA,KAAKC,oBAAL,GAA4B,IAA5B;;QAEA,MAAMC,kBAAN,GAA2B,MAAM;UAC/B,IAAI,KAAKC,UAAL,KAAoB,KAAKC,IAA7B,EAAmC;YACjC,IAAI,KAAKC,WAAL,IAAoB,KAAKC,eAA7B,EAA8C;cAC5C,MAAMC,WAAW,GAAGX,WAAW,CAACY,GAAZ,EAApB;cACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,OAAP,CAAe,KAAKL,eAApB,EAAqCM,IAArC,CACpB;gBAAA,IAAC,CAACC,MAAD,CAAD;gBAAA,OAAcA,MAAM,CAACC,WAAP,OAAyB,gBAAvC;cAAA,CADoB,CAAtB;cAGAjB,QAAQ,CACN,IAAIkB,2CAAJ,CAA8B;gBAC5BC,IAAI,EAAE,KAAKX,WADiB;gBAE5BY,SAAS,EAAE,KAAKhB,oBAFY;gBAG5BiB,QAAQ,EAAEX,WAAW,GAAG,KAAKN,oBAHD;gBAI5BkB,aAAa,EAAE,gBAJa;gBAK5BZ,WAL4B;gBAM5Ba,YAAY,EAAEX,aAAa,GAAGY,QAAQ,CAACZ,aAAa,CAAC,CAAD,CAAd,CAAX,GAAgC;cAN/B,CAA9B,CADM,CAAR;YAUD;UACF;QACF,CAnBD;MAoBD;;MAEDa,IAAI,GAAe;QACjB,KAAKrB,oBAAL,GAA4BL,WAAW,CAACY,GAAZ,EAA5B,CADiB,CAEjB;;QACA,MAAMc,IAAN,CAAW,YAAX;MACD;;IA/BiD;;IAiCpDxB,cAAc,CAACC,mBAAf,GAAqCJ,OAAO,CAACG,cAA7C;IACAH,OAAO,CAACG,cAAR,GAAyBA,cAAzB;EACD;AACF,CA1CM;;;;AA4CA,MAAMyB,uBAAuB,GAAI5B,OAAD,IAAkB;EACvD,IAAIA,OAAO,CAACG,cAAR,IAA0BH,OAAO,CAACG,cAAR,CAAuBC,mBAArD,EAA0E;IACxEJ,OAAO,CAACG,cAAR,GAAyBH,OAAO,CAACG,cAAR,CAAuBC,mBAAhD;EACD;AACF,CAJM"}