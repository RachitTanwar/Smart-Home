import { PerformanceResourceTiming } from './performance-entry';
export const installResourceLogger = (context, performance, addEntry) => {
  if (context.XMLHttpRequest && !context.XMLHttpRequest.performanceOriginal) {
    class XMLHttpRequest extends context.XMLHttpRequest {
      constructor() {
        super(...arguments);
        this.performanceStartTime = null;

        super.onreadystatechange = () => {
          if (this.readyState === this.DONE) {
            if (this.responseURL && this.responseHeaders) {
              const responseEnd = performance.now();
              const contentLength = Object.entries(this.responseHeaders).find(_ref => {
                let [header] = _ref;
                return header.toLowerCase() === 'content-length';
              });
              addEntry(new PerformanceResourceTiming({
                name: this.responseURL,
                startTime: this.performanceStartTime,
                duration: responseEnd - this.performanceStartTime,
                initiatorType: 'xmlhttprequest',
                responseEnd,
                transferSize: contentLength ? parseInt(contentLength[1]) : 0
              }));
            }
          }
        };
      }

      open() {
        this.performanceStartTime = performance.now(); //@ts-ignore

        super.open(...arguments);
      }

    }

    XMLHttpRequest.performanceOriginal = context.XMLHttpRequest;
    context.XMLHttpRequest = XMLHttpRequest;
  }
};
export const uninstallResourceLogger = context => {
  if (context.XMLHttpRequest && context.XMLHttpRequest.performanceOriginal) {
    context.XMLHttpRequest = context.XMLHttpRequest.performanceOriginal;
  }
};
//# sourceMappingURL=resource-logger.js.map